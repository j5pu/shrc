#!/usr/bin/env bash

set -eu

[ "${DEFAULT_HOME-}" ] || { set +u; . /etc/profile; set -u; }

JETBRAINS="${DEFAULT_HOME?}/JetBrains"
JETBRAINS_GENERATED="${SHRC_PROFILE_D_GENERATED_D?}/jetbrains.sh"
declare -A XMS=( ["Aqua"]=256 ["AppCode"]=256 ["CLion"]=256 ["DataGrip"]=256 ["DataSpell"]=256 ["Gateway"]=128
                 ["GoLand"]=256 ["Idea"]=512 ["PyCharm"]=512 ["RubyMine"]=256 ["WebStorm"]=256 )

declare -A XMX=( ["Aqua"]=2048 ["AppCode"]=2048 ["CLion"]=2048 ["DataGrip"]=2048 ["DataSpell"]=2048 ["Gateway"]=512
                 ["GoLand"]=2048 ["Idea"]=4096 ["PyCharm"]=4096 ["RubyMine"]=2048 ["WebStorm"]=2048 )
APPLICATIONS="$(printf "%s\n" "${!XMS[@]}" | sort)"

LINKS="$(cat <<EOF
codestyles
colors
fileTemplates
filetypes
inspection
javascript
jdbc-drivers
keymaps
mdn
options/mac
options/a-file-icons.xml
options/advancedSettings.xml
options/AICommit.xml
options/AICommitSettings.xml
options/applicationLibraries.xml
options/asciidoc.xml
options/atom-icon-associations.xml
options/aws.xml
options/baseRefactoring.xml
options/bashsupport-pro-folding.xml
options/bashsupport-pro.local.xml
options/bashsupport-pro.xml
options/ChartsStyleConfig.xml
options/ChatGPTConversations_170.xml
options/ChatGPTSettingsPlugin.xml
options/codestream.xml
options/color-highlighter.xml
options/colors.scheme.xml
options/completion.factors.user.xml
options/completionMLRanking.xml
options/console-font.xml
options/csv-plugin.xml
options/customPostfixTemplates.xml
options/customization.xml
options/databaseDrivers.xml
options/dbnavigator.xml
options/diff.xml
options/docker-registry.xml
options/DontShowAgainFeedbackService.xml
options/editor-font.xml
options/editor.xml
options/fastRequest.xml
options/features.usage.statistics.xml
options/fileEditorProviderManager.xml
options/FilenameTemplateSettings.xml
#options/filetypes.xml
#options/find.xml
#options/gemmanager.xml
options/git_toolbox_2.xml
options/github-copilot.local.xml
options/github-copilot.xml
options/github.xml
options/GitLink.xml
options/grazie_global.xml
options/highlightTokenConfiguration-v2.xml
options/ide-features-trainer.xml
options/ide.general.xml
options/ignore.xml
options/images.support.xml
options/IntelliLang.xml
options/intentionSettings.xml
options/javaeeExternalResources.xml
options/jdk.table.xml
options/keymapFlags.xml
options/laf.xml
options/log_highlighting.xml
options/MachineLearningCompletion.xml
options/macros.xml
options/magic-group.xml
options/markdown.xml
options/material_custom_theme.xml
options/material_theme.xml
options/MultiHighlight.xml
options/nativeTerminalPlugin.xml
options/NoteStashUserSettings.xml
options/notifications.xml
#options/OnboardingPageSettings.xml
options/one_dark_config.xml
options/orchide-app.xml
options/osFileIdePreferences.xml
#options/PackageRequirementsSettings.xml
#options/packages.xml
options/parameter.hints.xml
options/path.macros.xml
options/perl5.xml
options/pluginAdvertiser.xml
options/postfixTemplates.xml
options/project.default.xml
options/projectView.xml
options/PyDocumentationSettings.xml
options/pycrunch-jetbrains.xml
options/quick-file-preview.xml
options/rainbow-csv.xml
options/rainbow_brackets.xml
options/ReSTService.xml
options/remote-servers.xml
options/runner.layout.xml
options/scratch_config.xml
options/security.xml
options/send-2-terminal-settings.xml
options/shownTips.xml
options/smartsearch.xml
options/sonarlint.xml
options/spellchecker-dictionary.xml
options/sshConfigs.xml
options/stringManipulation.xml
options/templates.xml
options/terminal.xml
options/TestRunnerService.xml
options/tms.xml
options/trusted-paths.xml
options/ui
options/ui.lnf.xml
options/uml.xml
options/usage.statistics.xml
options/usageView.xml
options/vcs.xml
options/watcherDefaultTasks.xml
options/web-browsers.xml
options/web-types-npm-loader.xml
options/web-types-registry.xml
options/webServers.xml
quicklists
tasks
templates
tools
systemDictionary.dic
EOF
)"

#######################################
# compare and git if changed
# Arguments:
#   1
#   2
#######################################
compare() {
  if { test -e "$2" && ! cmp -s "$1" "$2"; } || ! test -e "$2"; then
    ( mv "$1" "$2" && cd "${2%/*}" && gita "$2" )
  fi
}

#######################################
# description
# Arguments:
#   0
#   1
#######################################
gita() { (git add "$1" && git commit -q -m "${0##*/}: $1" "$1" && git push -q) &>/dev/null; }

#######################################
# show usage
# Arguments:
#   1
#######################################
help() {
  local rc
  test $# -gt 0 && case "$1" in
    -h|--help|help) rc=0 ;;
    -d|--dry|-f|--force) return 0 ;;
    -*) >&2 printf '%s\n\n' "${0##*/}: $1: invalid option/argument" ;;
    *) return 0 ;;
  esac

  >&2 cat <<EOF
usage: ${0##*/} [links|plist|setenv]
   or: ${0##*/} [-h|--help|help]

manages JetBrains environment variables and configurations, default will setenv in macOS

Commands:
  links               make relative symlinks for application config directories
  plist               creates LaunchAgent to execute "jetbrains setenv"
  setenv              sets macOS env with variables to find configurations, plugins, etc.
   -h, --help, help   display this help and exit.
EOF
  exit "${rc:-1}"
}

#######################################
# relative links for configs to PyCharm
# Globals:
#   JETBRAINS_APPLICATIONS
#   JETBRAINS_CONFIG
#   LINKS
#   application
#   application_config
#   config
#   pycharm_config
# Arguments:
#  None
#######################################
links() {
  local application application_config config default_application="PyCharm" path default_config

  default_config="${JETBRAINS}/${default_application}"

  # shellcheck disable=SC2016
  for application in ${APPLICATIONS}; do
    { [ "${application}" != "${default_application}" ] && [ "${application}" != "Toolbox" ]; } || continue
    application_config="${JETBRAINS}/${application}"
    mkdir -p "${application_config}"

    dangling-rm "${application_config}"

    while read -r path; do # removed old ones (files not in LINKS if they are symlink
      config="${path/${application_config}\//}"
      grep -q "^${config}" <<<"${LINKS}" || ! test -L "${path}" \
        || { rm -r "${path}" && Warning "${0##*/}:" "${path} outdated removed"; }
    done < <(find "${application_config}" -type l)

    while read -r config; do # do links
      relative -f "${default_config}/${config}" "${application_config}/${config}"
    done < <(grep -v "^#" <<<"${LINKS}")

    dangling "${application_config}"

    relative "${JETBRAINS}/${default_application}/plugins" "${JETBRAINS}/${application}/plugins"

    ( cd "${JETBRAINS}/${application}" && gita "${JETBRAINS}/${application}" )
  done
}

#######################################
# create plist
# Arguments:
#  None
#######################################
plist(){
  local domain="com.mnopi.${0##*/}" file; file="${HOME}/Library/LaunchAgents/.plist"

  $MACOS || return 0

  cat > "${file}" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "https://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist>
    <dict>
        <key>Label</key>
        <string>com.mnopi.jetbrains</string>
        <key>ProgramArguments</key>
        <array>
            <string>"$(realpath "$0")"</string>
        </array>
        <key>RunAtLoad</key>
        <true/>
        <key>StandardOutPath</key>
        <string>/tmp/${domain}-stdout.log</string>
        <key>StandardErrorPath</key>
        <string>/tmp/${domain}-stderr.log</string>
    </dict>
</plist>
EOF

  launchctl print-disabled user/501 | grep "\"${domain}\" => false" &>/dev/null || launchctl load -w "${file}"
}

#######################################
# write properties
# Globals:
#   JETBRAINS
# Arguments:
#   1
#######################################
properties() {
  local file="${JETBRAINS}/${1}/.properties" tmp
  tmp="$(mktemp)"

  mkdir -p "${file%/*}"

  cat > "${tmp}" <<EOF
# Use \${idea.home.path} macro to specify location relative to IDE installation home.
# Use \${xxx} where xxx is any Java property (including defined in previous lines of this file) to refer to its value.
# Note for Windows users: please make sure you're using forward slashes: C:/dir1/dir2.
idea.scratch.path=${JETBRAINS}/scratch
#---------------------------------------------------------------------
# Uncomment this option if you want to customize a path to the settings directory.
#---------------------------------------------------------------------
idea.config.path=${JETBRAINS}/$1
#---------------------------------------------------------------------
# Uncomment this option if you want to customize a path to the caches directory.
#---------------------------------------------------------------------
idea.system.path=\${idea.config.path}/system
#---------------------------------------------------------------------
# Uncomment this option if you want to customize a path to the user-installed plugins directory.
#---------------------------------------------------------------------
idea.plugins.path=\${idea.config.path}/plugins
#---------------------------------------------------------------------
# Uncomment this option if you want to customize a path to the logs directory.
#---------------------------------------------------------------------
idea.log.path=\${idea.system.path}/log
#---------------------------------------------------------------------
# Maximum file size (in KiB) IDE should provide code assistance for.
# The larger file is the slower its editor works and higher overall system memory requirements are
# if code assistance is enabled. Remove this property or set to very large number if you need
# code assistance for any files available regardless of their size.
#---------------------------------------------------------------------
idea.max.intellisense.filesize=2500
#---------------------------------------------------------------------
# Maximum file size (in KiB) the IDE is able to open.
#---------------------------------------------------------------------
idea.max.content.load.filesize=20000
#---------------------------------------------------------------------
# This option controls console cyclic buffer: keeps the console output size not higher than the specified buffer\
 size (KiB).
# Older lines are deleted. In order to disable cycle buffer use idea.cycle.buffer.size=disabled
#---------------------------------------------------------------------
idea.cycle.buffer.size=disabled
#---------------------------------------------------------------------
# Configure if a special launcher should be used when running processes from within IDE.
# Using Launcher enables "soft exit" and "thread dump" features
#---------------------------------------------------------------------
idea.no.launcher=false
#---------------------------------------------------------------------
# To avoid too long classpath
#---------------------------------------------------------------------
idea.dynamic.classpath=false
#---------------------------------------------------------------------
# There are two possible values of idea.popup.weight property: "heavy" and "medium".
# If you have WM configured as "Focus follows mouse with Auto Raise" then you have to
# set this property to "medium". It prevents problems with popup menus on some
# configurations.
#---------------------------------------------------------------------
idea.popup.weight=heavy
#---------------------------------------------------------------------
# Removing this property may lead to editor performance degradation under Windows.
#---------------------------------------------------------------------
sun.java2d.d3d=false
#---------------------------------------------------------------------
# Removing this property may lead to editor performance degradation on Java 8+.
#---------------------------------------------------------------------
swing.bufferPerWindow=true
#---------------------------------------------------------------------
# Removing this property may lead to editor performance degradation under X Window.
#---------------------------------------------------------------------
sun.java2d.pmoffscreen=false
#---------------------------------------------------------------------
# Enables HiDPI support in JBR
#---------------------------------------------------------------------
sun.java2d.uiScale.enabled=true
#---------------------------------------------------------------------
# Applicable to the Swing text components displaying HTML (except JEditorPane).
# Rebases CSS size map depending on the component's font size to let relative
# font size values (smaller, larger) scale properly. JBR-only.
#---------------------------------------------------------------------
javax.swing.rebaseCssSizeMap=true
#---------------------------------------------------------------------
# Workaround for accessing (in terms of a11y) long VCS logs on macOS. JBR-only.
#---------------------------------------------------------------------
sun.awt.mac.a11y.tableAccessibleRowCountThreshold=1000
#---------------------------------------------------------------------
# Enabling an optimization that excludes traversal of collapsed accessible nodes from the accessible tree. JBR-4167
#---------------------------------------------------------------------
javax.swing.JTree.excludeAccessibleChildrenFromClosedNodes=true
#---------------------------------------------------------------------
# Workaround to avoid long hangs while accessing clipboard under Mac OS X.
#---------------------------------------------------------------------
#ide.mac.useNativeClipboard=True
#---------------------------------------------------------------------
# Maximum size (KiB) the IDE will use to show historical file contents -
# in Show Diff or when calculating Digest Diff
#---------------------------------------------------------------------
#idea.max.vcs.loaded.size.kb=20480
#---------------------------------------------------------------------
# IDEA file chooser peeks inside directories to detect whether they contain a valid project
# (to mark such directories with a corresponding icon).
# Uncommenting the option prevents this behavior outside the user home directory.
#---------------------------------------------------------------------
#idea.chooser.lookup.for.project.dirs=false
#---------------------------------------------------------------------
# In LWCToolkit.invokeAndWait() listens to EDT state and disposes the invocation event
# when EDT becomes free but the invocation event is not yet dispatched (considered lost).
# This prevents a deadlock and makes the invocation return some default result.
#---------------------------------------------------------------------
sun.lwawt.macosx.LWCToolkit.invokeAndWait.disposeOnEDTFree=true
#---------------------------------------------------------------------
# Experimental options that do a number of things to make truly smooth scrolling possible:
#
# * Enables hardware-accelerated scrolling.
#     Blit-acceleration copies as much of the rendered area as possible and then repaints only newly exposed region.
#     This helps to improve scrolling performance and to reduce CPU usage (especially if drawing is compute-intensive).
#
# * Enables "true double buffering".
#     True double buffering is needed to eliminate tearing on blit-accelerated scrolling and to restore
#     frame buffer content without the usual repainting, even when the EDT is blocked.
#
# * Adds "idea.true.smooth.scrolling.debug" option.
#     Checks whether blit-accelerated scrolling is feasible, and if so, checks whether true double buffering is\
 available.
#
# * Enables handling of high-precision mouse wheel events.
#     Although Java 7 introduced MouseWheelEven.getPreciseWheelRotation() method, JScrollPane doesn't use it so far.
#     Depends on the Editor / General / Smooth Scrolling setting, remote desktop detection and power save mode state.
#     Ideally, we need to patch the runtime (on Windows, Linux and macOS) to improve handling of the fine-grained\
 input data.
#     This feature can be toggled via "idea.true.smooth.scrolling.high.precision" option.
#
# * Enables handling of pixel-perfect scrolling events.
#     Currently, this mode is available only under macOS with JetBrains Runtime.
#     This feature can be toggled via "idea.true.smooth.scrolling.pixel.perfect" option.
#
# * Enables interpolation of scrolling input (scrollbar, mouse wheel, touchpad, keys, etc).
#     Smooths input, which lacks both spatial and temporal resolution, performs the rendering asynchronously.
#     Depends on the Editor / General / Smooth Scrolling setting, remote desktop detection and power save mode state.
#     The feature can be tweaked using the following options:
#       "idea.true.smooth.scrolling.interpolation" - the main switch
#       "idea.true.smooth.scrolling.interpolation.scrollbar" - scrollbar interpolation
#       "idea.true.smooth.scrolling.interpolation.scrollbar.delay" - initial delay for scrollbar interpolation (ms)
#       "idea.true.smooth.scrolling.interpolation.mouse.wheel" - mouse wheel / touchpad interpolation
#       "idea.true.smooth.scrolling.interpolation.mouse.wheel.delay.min" - minimum initial delay for mouse wheel\
 interpolation (ms)
#       "idea.true.smooth.scrolling.interpolation.mouse.wheel.delay.max" - maximum initial delay for mouse wheel\
 interpolation (ms)
#       "idea.true.smooth.scrolling.interpolation.precision.touchpad" - touchpad interpolation
#       "idea.true.smooth.scrolling.interpolation.precision.touchpad.delay" - initial delay for touchpad\
 interpolation (ms)
#       "idea.true.smooth.scrolling.interpolation.other" - interpolation of other input sources
#       "idea.true.smooth.scrolling.interpolation.other.delay" - initial delay for other input source interpolation (ms)
#
# * Adds on-demand horizontal scrollbar in editor.
#     The horizontal scrollbar is shown only when it's actually needed for currently visible content.
#     This helps to save editor space and to prevent occasional horizontal "jitter" on vertical touchpad scrolling.
#     This feature can be toggled via "idea.true.smooth.scrolling.dynamic.scrollbars" option.
#---------------------------------------------------------------------
idea.true.smooth.scrolling=true
#-----------------------------------------------------------------------
# Change to 'enabled' if you want to receive instant visual notifications
# about fatal errors that happen to an IDE or plugins installed.
#-----------------------------------------------------------------------
idea.fatal.error.notification=disabled
#---------------------------------------------------------------------
# macOS-specific system properties
#---------------------------------------------------------------------
com.apple.mrj.application.live-resize=false
jbScreenMenuBar.enabled=true
apple.awt.fileDialogForDirectories=true
apple.awt.graphics.UseQuartz=true
apple.awt.fullscreencapturealldisplays=false
ide.mac.useNativeClipboard=false
EOF

  compare "${tmp}" "${file}"

  echo "${file}"
}

#######################################
# write vmoptions
# Globals:
#   JETBRAINS
# Arguments:
#   1
#######################################
vmoptions() {
  local file="${JETBRAINS}/${1}/.vmoptions" tmp
  tmp="$(mktemp)"

  cat > "${tmp}" <<EOF
-Xms${XMS[$1]}m
-Xmx${XMX[$1]}m
-XX:ReservedCodeCacheSize=512m
-XX:+UseG1GC
-XX:SoftRefLRUPolicyMSPerMB=50
-XX:CICompilerCount=2
-XX:+HeapDumpOnOutOfMemoryError
-XX:-OmitStackTraceInFastThrow
-XX:+IgnoreUnrecognizedVMOptions
-XX:CompileCommand=exclude,com/intellij/openapi/vfs/impl/FilePartNodeRoot,trieDescend
-ea
-Dsun.io.useCanonCaches=false
-Dsun.java2d.metal=true
-Djbr.catch.SIGABRT=true
-Djdk.http.auth.tunneling.disabledSchemes=""
-Djdk.attach.allowAttachSelf=true
-Djdk.module.illegalAccess.silent=true
-Dkotlinx.coroutines.debug=off
-Dapple.awt.application.appearance=system
-XX:ErrorFile=/tmp/java_error_in_$1_%p.log
-XX:HeapDumpPath=/tmp/java_error_in_$1_%p.hprof
EOF

  compare "${tmp}" "${file}"

  echo "${file}"
}

#######################################
# generate jetbrains variables and setenv for macOS
# Arguments:
#  None
#######################################
setenv() {
  local application properties tmp vmoptions
  tmp="$(mktemp)"

  echo "# shellcheck shell=sh" > "${tmp}"
  for application in ${APPLICATIONS}; do
    properties=$(properties "${application}")
    vmoptions=$(vmoptions "${application}")

    {
      echo "export ${application^^}_PROPERTIES=\"${properties}\""
      echo "export ${application^^}_VM_OPTIONS=\"${vmoptions}\""
    } >> "${tmp}"

    if $MACOS; then
      launchctl setenv "${application^^}_PROPERTIES" "${properties}"
      launchctl setenv "${application^^}_VM_OPTIONS" "${vmoptions}"
    fi
  done

  compare "${tmp}" "${JETBRAINS_GENERATED}"

  . "${JETBRAINS_GENERATED}"
}

#######################################
# description
# Globals:
#   JETBRAINS_GENERATED
# Arguments:
#  None
#######################################
main() {
  local arg func="setenv"

  for arg; do
    case "${arg}" in
      links|plist|setenv) func="${arg}" ;;
      *) help "$@" ;;
    esac
  done

  "${func}" "$@"
}

main "$@"
