#!/bin/sh

set -eu

#######################################
# show usage
# Arguments:
#   1
#######################################
help() {
  test $# -eq 0 || case "$1" in
    -h|--help|help) rc=0 ;;
    *) return 0 ;;
  esac

  >&2 cat <<EOF
usage: ${0##*/} input [to]
   or: input | ${0##*/} [to]
       ${0##*/} [-h|--help|help]

replace input newlines with value and remove last newline always

adds prefix '^' and suffix '\$' on each record/line when [to] if not provided and | is used as default

Arguments:
  input               the input lines to replace new lines (stdin if not input).
  [to]                new value (default: |).

Commands:
   -h, --help, help   display this help and exit.

Examples:
  $ ${0##*/} "\$(printf '%s\n' 1 "2 2" 3)"
  ^1$|^2 2$|^3$
  $ ${0##*/} "\$(printf '%s\n' 1 "2 2" 3)" '*:'
  1*:2 2*:3
  $ echo "/bin:/usr/bin:" | tr ':' '\n' | ${0##*/} :
  /bin:/usr/bin
  $ printf '%s\n' 1 "2 2" 3  | ${0##*/} "|"
  1|2 2|3
  $ ${0##*/} "\$(printf '%s\n' 1 "2 2" 3 )" "|"
  1|2 2|3
EOF
  exit "${rc:-1}"
}

#######################################
# replace using / as sed delimiter with pipe/vertical
# Arguments:
#   1   input
#######################################
regex() { sed -n "H;\${x;s/\n/${1:-|}/g;s/^${1:-|}//;p;}"; }

#######################################
# replace using | as sed delimiter with pipe/vertical
# Arguments:
#   1   input
#######################################
vertical()  { sed -n "H;\${x;s|\n|${1:-/}|g;s|^${1:-/}||;p;}"; }

#######################################
# replace newline with value and remove last newline always
# Arguments:
#   value   the value to replace new lines.
#   [to]    new value (default: |).
#######################################
main() {
  help "$@"
  function="vertical"; echo "${2:-|}" | grep -q -- '/' || function="regex"
  if [ "${2-}" ]; then
    echo "$1" | "${function}" "$2"
  else
    echo "$1" | awk -v p='^' -v s='$' '{ print p $0 s }' | "${function}"
  fi
}

test -t 0 || ! test -s /dev/stdin || set -- "$(cat </dev/stdin)" "$@"

main "$@"
